import React, { Component } from 'react';
import NewItems from './NewItems';
import PropTypes from 'prop-types';
import InfiniteScroll from "react-infinite-scroll-component";
import Spinner from './Spinner.js';
export default class News extends Component {
  static defaultProps = {
    country: 'us',
    pageSize: 8,
    category:'general'
  }
  static propTypes = {
    country: PropTypes.string,
    pageSize: PropTypes.number,
    category: PropTypes.string
  }
  Capitalize =(String) =>{
      return String.charAt(0).toUpperCase() + String.slice(1);
  }
  constructor(props) {
    super(props);       // calls the constructor of React.component library, without super function we can't use this.state (it's gives error)
    this.state = {
      articles: [],
      loading: false,
      page: 1,
      totalResults: 0
    };
    document.title = `${this.Capitalize(this.props.category)}- NewsMonkey`;
  }
  
  async componentDidMount() {   // it is run after render menthod
    this.fetchNews();
  }

  fetchNews = async (page = 1) => {
    try {
      this.setState({loading: true});
      let url = `https://newsapi.org/v2/top-headlines?country=${this.props.country}&category=${this.props.category}&apiKey=0f2726646d2c46a3b2a614117fb3232b&page=${page}&pageSize=${this.props.pageSize}`;
      let data = await fetch(url);
      let parseData = await data.json();

      this.setState({
        articles: parseData.articles,
        totalResults: parseData.totalResults,
        page : page,
        loading: false
      });
    } catch (error) {
      console.error("Error fetching news:", error);
    }
  };

  // handleNextClick = async () => {
  //   if (this.state.page < Math.ceil(this.state.totalResults /this.props.pageSize)) {
  //     this.fetchNews(this.state.page + 1);
  //   }
  // };
            // We Can Use Infinite Scroll bar so can't use these button

  // handlePrevClick = () => {
  //   if (this.state.page > 1) {
  //     this.fetchNews(this.state.page - 1);
  //   }
  // };
  fetchMoreData = async (page =1) => {
    this.setState({page: this.state.page + 1})
    this.setState({loading: true});
      let url = `https://newsapi.org/v2/top-headlines?country=${this.props.country}&category=${this.props.category}&apiKey=0f2726646d2c46a3b2a614117fb3232b&page=${page}&pageSize=${this.props.pageSize}`;
      let data = await fetch(url);
      let parseData = await data.json();

      this.setState({
        articles: this.state.articles.concat(parseData.articles),
        totalResults: parseData.totalResults,
        page : page,
        loading: false
  });
}
  render() {
    return (
      <div className='container my-3'>
        <h2 className='text-center' style={{padding: '20px'}}>NewMoneky - Top {this.Capitalize(this.props.category)} Headlines</h2>
        {/* {this.state.loading && <Spinner/>} */}
        <div className="row">
        <InfiniteScroll
            dataLength={this.state.articles.length}
            next={this.fetchMoreData}
            hasMore={this.state.articles.length !== this.state.totalResults}
            loader={<Spinner/>}
            scrollableTarget="scrollableDiv"
          >                        {/* We can use key, to identify the each articles uniquely */}
           {this.state.articles.map((element) => ( 
            <div className="col-md-4" key={element.url}>
              <NewItems 
                title={element.title ? element.title : "No Title"}
                description={element.description ? element.description : "No Description Available"}
                imageUrl={element.urlToImage} 
                newsUrl={element.url} 
                author ={element.author ? element.author : "Unknown"}
                date = {element.publishedAt}
                source = {element.source.name}
              />
            </div>
          ))}
          </InfiniteScroll>
        </div>
        {/* <div className="d-flex justify-content-between my-3">
          <button 
            disabled={this.state.page === 1} 
            className="btn btn-dark" 
            onClick={this.handlePrevClick}
          >
            &larr; Previous
          </button>
          <button 
            disabled={this.state.page + 1 > Math.ceil(this.state.totalResults /this.props.pageSize)} 
            className="btn btn-dark" 
            onClick={this.handleNextClick}
          >
            Next &rarr;
          </button>
        </div> */}
      </div>
    );
  }
} 